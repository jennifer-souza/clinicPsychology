"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var objection_1 = require("objection");
var declarations_1 = require("../declarations");
var utils_1 = require("../internals/utils");
function Join(modelClass, type, throughOrSource, firstParty, secondParty) {
    return function (target, propertyKey) {
        var getModelClass = function (m) {
            if (m === void 0) { m = modelClass; }
            return utils_1.getMetaDescriptor(declarations_1.resolveModelClass(m));
        };
        function extractModels() {
            var _a = target.constructor, sourceTable = _a.tableName, sourceId = _a.idColumn;
            var _b = getModelClass(), targetTable = _b.tableName, targetId = _b.idColumn;
            return { sourceTable: sourceTable, sourceId: sourceId, targetTable: targetTable, targetId: targetId };
        }
        var appendJoin = function (joinFn) {
            var _a;
            return utils_1.appendMeta(target, declarations_1.META_ANN_JOIN, (_a = {}, _a[propertyKey] = joinFn, _a));
        };
        switch (type) {
            case 'hasMany':
                appendJoin(function () {
                    var _a = extractModels(), sourceTable = _a.sourceTable, sourceId = _a.sourceId, targetTable = _a.targetTable;
                    return {
                        modelClass: function () { return getModelClass(); },
                        relation: objection_1.Model.HasManyRelation,
                        join: {
                            from: sourceTable + "." + (firstParty || sourceId),
                            to: targetTable + "." + throughOrSource,
                        },
                    };
                });
                break;
            case 'manyToMany':
                if (typeof throughOrSource === 'object') {
                    appendJoin(function () {
                        var thModelClass = throughOrSource.modelClass;
                        var throughTable = getModelClass(thModelClass).tableName;
                        var _a = extractModels(), sourceTable = _a.sourceTable, sourceId = _a.sourceId, targetTable = _a.targetTable, targetId = _a.targetId;
                        return {
                            modelClass: function () { return getModelClass(); },
                            relation: objection_1.Model.ManyToManyRelation,
                            join: {
                                from: sourceTable + "." + (firstParty || sourceId),
                                to: targetTable + "." + (secondParty || targetId),
                                through: {
                                    from: throughTable + "." + throughOrSource.from,
                                    to: throughTable + "." + throughOrSource.to,
                                },
                            },
                        };
                    });
                }
                break;
            case 'belongsTo':
                appendJoin(function () {
                    var _a = extractModels(), sourceTable = _a.sourceTable, sourceId = _a.sourceId, targetTable = _a.targetTable;
                    return {
                        modelClass: function () { return getModelClass(); },
                        relation: objection_1.Model.BelongsToOneRelation,
                        join: {
                            from: sourceTable + "." + throughOrSource,
                            to: targetTable + "." + (firstParty || sourceId),
                        },
                    };
                });
                break;
        }
    };
}
exports.Join = Join;
