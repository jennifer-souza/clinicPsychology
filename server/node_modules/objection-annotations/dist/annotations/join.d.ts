import { Model } from 'objection';
import { PickModelField } from '../declarations';
export declare function Join<T extends typeof Model, TSource extends Model>(targetModelClass: T | (() => T), type: 'hasMany', targetField: PickModelField<T['prototype']>, sourceField?: PickModelField<TSource>): (sourceModelClass: TSource, propertyKey: string) => void;
export declare function Join<T extends typeof Model, TSource extends Model, TThrough extends typeof Model>(targetModelClass: T | (() => T), type: 'manyToMany', throughEntity: {
    modelClass: TThrough | (() => TThrough);
    from: PickModelField<TThrough['prototype']>;
    to: PickModelField<TThrough['prototype']>;
}, sourceField?: string | PickModelField<TSource>, targetField?: PickModelField<T['prototype']>): (sourceModelClass: TSource, propertyKey: string) => void;
export declare function Join<T extends typeof Model, TSource extends Model>(targetModelClass: T | (() => T), type: 'belongsTo', sourceField: string | PickModelField<TSource>, targetField?: PickModelField<T['prototype']>): (sourceModelClass: TSource, propertyKey: string) => void;
