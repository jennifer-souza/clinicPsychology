"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var declarations_1 = require("../declarations");
var utils_1 = require("../internals/utils");
var declarations_2 = require("../declarations");
function createModelClassFn(modelClass) {
    var mClass;
    return function () {
        if (!mClass) {
            mClass = utils_1.getMetaDescriptor(declarations_2.resolveModelClass(modelClass));
        }
        var tableName = mClass.tableName, idColumn = mClass.idColumn;
        return {
            mClass: mClass, tableName: tableName,
            idColumn: Array.isArray(idColumn) ? idColumn[0] : idColumn,
        };
    };
}
function HasReference(modelClass, optsOrRefColumn) {
    var _a = typeof optsOrRefColumn === 'object'
        && optsOrRefColumn || (typeof optsOrRefColumn === 'string' && {
        refColumn: optsOrRefColumn,
    }) || {}, refColumn = _a.refColumn, targetColumn = _a.targetColumn, foreignKeyName = _a.foreignKeyName, alterSource = _a.alterSource;
    var mFn = createModelClassFn(modelClass);
    return function (target) {
        utils_1.pushMeta(target, declarations_1.META_ANN_HAS_REFS, function () {
            var _a = mFn(), mClass = _a.mClass, tableName = _a.tableName;
            return {
                foreignKeyName: foreignKeyName,
                alterSource: alterSource === void 0 ? true : alterSource,
                source: {
                    modelClass: mClass,
                    tableName: tableName,
                    field: refColumn,
                },
                target: {
                    modelClass: target,
                    tableName: target.tableName,
                    field: targetColumn || (Array.isArray(target.idColumn)
                        ? target.idColumn[0] : target.idColumn),
                },
            };
        });
    };
}
exports.HasReference = HasReference;
function Reference(modelClass, optsOrTargetColumn) {
    var _a = typeof optsOrTargetColumn === 'object'
        && optsOrTargetColumn || (typeof optsOrTargetColumn === 'string' && {
        targetColumn: optsOrTargetColumn,
    }) || {}, targetColumn = _a.targetColumn, foreignKeyName = _a.foreignKeyName, required = _a.required, schema = _a.schema;
    var mFn = createModelClassFn(modelClass);
    return function (target, propertyKey) {
        var _a, _b;
        var colSchemas = utils_1.getMeta(target, declarations_1.META_ANN_SCHEMA_COL);
        if (!colSchemas || !colSchemas[propertyKey]) {
            utils_1.appendMeta(target, declarations_1.META_ANN_SCHEMA_COL, (_a = {},
                _a[propertyKey] = function () { return ({
                    type: function () {
                        var _a = mFn(), mClass = _a.mClass, idColumn = _a.idColumn;
                        return [mClass, targetColumn || idColumn];
                    },
                    opts: { required: required, schema: schema },
                }); },
                _a));
        }
        utils_1.appendMeta(target, declarations_1.META_ANN_REFS, (_b = {},
            _b[propertyKey] = function () {
                var _a = mFn(), tableName = _a.tableName, idColumn = _a.idColumn, mClass = _a.mClass;
                return {
                    foreignKeyName: foreignKeyName,
                    source: {
                        modelClass: target['constructor'],
                        tableName: target['constructor']['tableName'],
                        field: propertyKey,
                    },
                    target: {
                        modelClass: mClass, tableName: tableName,
                        field: targetColumn || idColumn,
                    },
                };
            },
            _b));
    };
}
exports.Reference = Reference;
