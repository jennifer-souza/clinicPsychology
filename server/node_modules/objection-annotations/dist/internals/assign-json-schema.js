"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var declarations_1 = require("../declarations");
var utils_1 = require("./utils");
function resolveColumnAnnotations(_a, forceType) {
    var type = _a.type, opts = _a.opts;
    var typeFn = false;
    var refMeta;
    var defaultUnsigned;
    if (typeof type === 'function') {
        var _b = type(), refModel = _b[0], refField = _b[1];
        var refMetaModel = utils_1.getMeta(refModel, declarations_1.META_ANN_SCHEMA_COL);
        var refMetaFn = refMetaModel && refMetaModel[refField];
        refMeta = typeof refMetaFn === 'function' && refMetaFn();
        if (!refMeta) {
            return {};
        }
        if (utils_1.wrapArray(refModel.idColumn).includes(refField)) {
            defaultUnsigned = true;
        }
        type = refMeta['type'];
        typeFn = true;
    }
    if (forceType || typeFn) {
        var orgType = type;
        if (type === 'bigIncrements') {
            type = 'bigInteger';
        }
        else if (type === 'increments') {
            type = 'integer';
        }
        if (!defaultUnsigned) {
            defaultUnsigned = ['bigIncrements', 'increments'].includes(orgType);
        }
        var _c = refMeta && refMeta['opts'] || {}, schema = _c.schema, textType = _c.textType, unsigned = _c.unsigned, required = _c.required;
        opts = Object.assign({
            textType: textType, unsigned: unsigned === void 0 ? defaultUnsigned : unsigned,
        }, opts || {}, schema && {
            schema: Object.assign(schema, {
                type: utils_1.getJsonSchemaType(type, !required),
            }, opts && opts.schema),
        });
    }
    return { type: type, opts: opts };
}
exports.resolveColumnAnnotations = resolveColumnAnnotations;
function assignJsonSchema(target) {
    var colSchemas = utils_1.getMeta(target, declarations_1.META_ANN_SCHEMA_COL);
    Object.entries(colSchemas)
        .filter(function (_a) {
        var colName = _a[0];
        return !target.jsonSchema.properties[colName];
    })
        .forEach(function (_a) {
        var colName = _a[0], colFn = _a[1];
        var _b = resolveColumnAnnotations(colFn(), true), type = _b.type, opts = _b.opts;
        target.jsonSchema.properties[colName] = type && opts.schema || {};
    });
}
exports.assignJsonSchema = assignJsonSchema;
