"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var objection_1 = require("objection");
var declarations_1 = require("../declarations");
function getJsonSchemaType(colType, nullable) {
    var types = [['tinytext', 'text', 'mediumtext', 'longtext'].includes(colType)
            ? 'string' : colType];
    if (colType === 'bigInteger') {
        types.push('integer');
    }
    var canNull = typeof nullable === 'function' ? nullable() : nullable;
    if (canNull) {
        types.push('null');
    }
    return types.length === 1 ? types[0] : types;
}
exports.getJsonSchemaType = getJsonSchemaType;
function wrapArray(val) {
    if (Array.isArray(val)) {
        return val;
    }
    return val !== void 0 ? [val] : [];
}
exports.wrapArray = wrapArray;
function getMetaDescriptor(target) {
    var meta = target instanceof objection_1.Model ? target['constructor'] : target;
    return typeof meta === 'object' && (meta && meta['constructor']) || meta;
}
exports.getMetaDescriptor = getMetaDescriptor;
function appendMeta(target, key, metaVal) {
    var meta = getMetaDescriptor(target);
    meta[declarations_1.META_ANNOTATION] = Object.assign({}, meta[declarations_1.META_ANNOTATION]);
    meta[declarations_1.META_ANNOTATION][key] = Object.assign({}, meta[declarations_1.META_ANNOTATION][key], metaVal);
}
exports.appendMeta = appendMeta;
function pushMeta(target, key) {
    var metaVal = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        metaVal[_i - 2] = arguments[_i];
    }
    var meta = getMetaDescriptor(target);
    meta[declarations_1.META_ANNOTATION] = Object.assign({}, meta[declarations_1.META_ANNOTATION]);
    var existedVal = meta[declarations_1.META_ANNOTATION][key];
    if (!Array.isArray(existedVal)) {
        existedVal = meta[declarations_1.META_ANNOTATION][key] = [];
    }
    existedVal.push.apply(existedVal, metaVal);
}
exports.pushMeta = pushMeta;
function getMeta(target, key) {
    var meta = getMetaDescriptor(target);
    var anno = meta[declarations_1.META_ANNOTATION];
    if (anno && typeof anno === 'object') {
        var annoVal = anno[key];
        if (annoVal && typeof annoVal === 'object') {
            return annoVal;
        }
    }
    return {};
}
exports.getMeta = getMeta;
