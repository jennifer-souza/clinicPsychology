import Knex = require('knex');
import { JSONSchema, Model } from 'objection';
export interface ForeignKeyInfo {
    foreignKeyName: string;
    alterSource?: boolean | 'required';
    source: {
        modelClass: typeof Model;
        tableName: string;
        field: string;
    };
    target: {
        modelClass: typeof Model;
        tableName: string;
        field: string;
    };
}
export declare type TableForeignInfo = Record<string, () => ForeignKeyInfo>;
export declare type PickModelField<T extends Model> = Exclude<{
    [P in keyof T]: T[P] extends (string | number | boolean) ? P : never;
}[keyof T], keyof Model>;
export declare const META_ANNOTATION: unique symbol;
export declare const META_ANN_SCHEMA: unique symbol;
export declare const META_ANN_SCHEMA_COL: unique symbol;
export declare const META_ANN_JOIN: unique symbol;
export declare const META_ANN_REFS: unique symbol;
export declare const META_ANN_HAS_REFS: unique symbol;
export declare const META_COL_BUILDER: unique symbol;
export interface TableOpts {
    uniques?: Array<string | string[] | {
        fields: string | string[];
        name?: string;
    }>;
    indexes?: Array<string | string[] | {
        fields: string | string[];
        name?: string;
        type?: string;
    }>;
    keys?: string | string[];
}
export interface ColumnOpts {
    required?: boolean;
    index?: boolean | string;
    unique?: boolean | string;
    default?: Knex.Value | null;
    schema?: JSONSchema;
    unsigned?: boolean;
    textType?: 'tinytext' | 'text' | 'mediumtext' | 'longtext';
}
export interface ReferenceOpts<T extends typeof Model> {
    targetColumn?: PickModelField<T['prototype']>;
    foreignKeyName?: string;
    schema?: JSONSchema;
    required?: boolean;
}
export declare function resolveModelClass<T extends typeof Model>(m: T | (() => T)): T;
